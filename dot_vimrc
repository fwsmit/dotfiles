set nocompatible              " be iMproved, required
filetype off                  " required

" set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
set visualbell " turn off annoying beep

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" easy insert mode escape
Plugin 'zhou13/vim-easyescape'

" file tree explorer
Plugin 'scrooloose/nerdtree'

" nerd commenter
Plugin 'scrooloose/nerdcommenter'

" color schemes:
" material-monokai
" Plugin 'skielbasa/vim-material-monokai'
" Plugin 'altercation/vim-colors-solarized'
Plugin 'morhetz/gruvbox'

" fuzzy finder
"Bundle 'L9'
"Bundle 'FuzzyFinder'

" Fuzzy file finder
Plugin 'ctrlpvim/ctrlp.vim'
" latex
"Plugin 'ying17zi/vim-live-latex-preview'

" vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" youcomplete me code completion
Plugin 'valloric/youcompleteme'

" surround vim
Plugin 'tpope/vim-surround'

" bracket completion
Plugin 'Raimondi/delimitMate'
"
" LucHerimitte stuff
"  - Header/source switching
"  - Brackets
Plugin 'LucHermitte/lh-vim-lib'
"Plugin 'LucHermitte/lh-style'
"Plugin 'LucHermitte/lh-tags'
"Plugin 'LucHermitte/lh-dev'
"Plugin 'LucHermitte/lh-brackets'
"Plugin 'LucHermitte/searchInRuntime'
""Plugin 'LucHermitte/mu-template'
"Plugin 'tomtom/stakeholders_vim'
Plugin 'LucHermitte/alternate-lite'
""Plugin 'LucHermitte/lh-cpp'

" for building cmake projects
Plugin 'skywind3000/asyncrun.vim'

" Syntastic, for syntax highlighting
Plugin 'w0rp/ale'

" Goyo, for removing clutter and centering text
Plugin 'junegunn/goyo.vim'

"autoswap
" Got the file from https://gist.githubusercontent.com/Uroc327/8134169/raw/d00268413240f0d82a846a3b402d6138a60ff210/autoswap_wmctrl.vim'
" Plugin 'file:///home/friso/.vim/bundle/autoswap_wmctl.vim'
Plugin 'gioele/vim-autoswap'

" Julia support
" Plugin 'JuliaEditorSupport/julia-vim'

" Screenshot plugin
" Plugin 'vim-scripts/ScreenShot' " Doensn't seem to wor
Plugin 'jmckiern/vim-shoot'

" Git plugin fugitive
Plugin 'tpope/vim-fugitive'

" Repeat plugin
Plugin 'tpope/vim-repeat'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"turn on automatic indentation
set tabstop=8
set shiftwidth=8
set smartindent
set expandtab
"turn on line numbers
set number
set relativenumber
" wrap long lines only at whitespace
set linebreak
let &showbreak = '+++ '
" Do not insert two spaces after a .
set nojoinspaces

" NERDTree config
" Give a shortcut key to NERD Tree
map <F2> :NERDTreeToggle<CR>

nmap \a :AS<CR>
call lh#alternate#register_extension('g', 'h',   ['c', 'cpp'], 1)
" call lh#alternate#register_extension('g', 'cpp', ['h'], 1)
" call lh#alternate#register_extension('g', 'h', ['cpp'], 1)
let g:usemarks = 0

" Ctrl p mappings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
			\ 'dir': '\v[\/](\.git|cmake|build)$',
			\ 'file': '\v\.(exe|so|dll|o|d)$',
			\ }

" colorschemes
set background=dark
syntax enable
" set t_Co=256
" colorscheme material-monokai
" colorscheme solarized
" let g:gruvbox_italic=1
set termguicolors
colorscheme gruvbox
" change comment settings
highlight Comment cterm=italic
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
autocmd BufRead,BufNewFile *.frag setfiletype shader
let g:NERDCustomDelimiters = {
		\ 'shader': { 'left': '//'},
		\ }

" vim-airline
" if !exists('g:airline_symbols')
	" let g:airline_symbols = {}
" endif
" let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.readonly = 'READ ONLY'
let g:airline_powerline_fonts = 1 " activate powerline symbols

set encoding=utf-8
"set guifont=Liberation\ Mono\ for\ Powerline\ 100
"set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 10


"Searching
set ignorecase
set smartcase
set incsearch
set nohlsearch

" exit and save shortcuts
nmap \x :conf qa<CR>
nmap \s :wa<CR>
nmap \q :conf q<CR>

" fuzzyfinder config
"let g:fufcoveragefile_exclude = 'build/.*'  " doesnt work
"let g:fufcoveragefile_exclude = '*.cpp'  " doesnt work
"
" youcompletme config
let g:ycm_global_ycm_extra_conf = '/usr/share/vim/vimfiles/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" let g:ycm_filetype_whitelist = { 'cpp': 1, "py": 1}
let g:ycm_autoclose_preview_window_after_insertion = 1
nnoremap \ef :YcmCompleter FixIt<CR>
nnoremap \et :YcmCompleter GetType<CR>
nnoremap \er :YcmCompleter RefactorRename<Space>
nnoremap \ed :YcmCompleter GoToDefinition<CR>
nnoremap \ej :YcmCompleter GoToDeclaration<CR>
nnoremap <Leader>en :ALENext<CR>
nnoremap <Leader>ep :ALEPrevious<CR>

" Don't insert a template
let g:mt_IDontWantTemplatesAutomaticallyInserted = 1

let g:easyescape_timeout = 300

" Mappings to move trough camelCase words
nnoremap ,w /\u<CR>
nnoremap ,b ?\u<CR>

" insert new line without going to insert mode
nnoremap <Bar> O<Esc>
nnoremap <CR> o<Esc>

set guioptions-=T

" bracket completion options
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

" async configuration
" Vertical size of the quickfix window
let g:asyncrun_open = 6

nnoremap <C-j> :cn<CR>
nnoremap <C-k> :cp<CR>
nnoremap <F5> :make<CR>
nnoremap <C-b> :make<CR>

function PythonMake()
	set autowrite
	set makeprg=python\ %
endfunction

function ShellMake()
	set autowrite
	set makeprg=sh\ %
endfunction

function PrepCppMake()
	set autowrite
	nnoremap <C-b> :wa <CR> :call CppMake() <CR>
endfunction


" Cpp specific
autocmd FileType cpp call PrepCppMake()
" Python specific
autocmd FileType python call PythonMake()
autocmd FileType sh call ShellMake()
autocmd FileType text,markdown setlocal spell
autocmd BufEnter *.nl.md setlocal spelllang=nl
autocmd BufEnter *.nl.md call setbufvar(bufnr("%"), 'easyescape_disable', 1)
autocmd FileType text,markdown,pod setlocal textwidth=80
autocmd FileType text,markdown,pod nmap j gj
autocmd FileType text,markdown,pod nmap k gk
autocmd FileType text,markdown,pod setlocal nosmartindent
autocmd FileType template set ft=config
autocmd FileType css setlocal tabstop=4
autocmd FileType css setlocal shiftwidth=4
autocmd FileType css setlocal expandtab
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path %
autocmd BufWritePost ~/.local/share/chezmoi/* echo ("Applied the changes")
autocmd BufEnter ~/git-repos/sway/* setlocal noexpandtab
autocmd BufEnter ~/git-repos/wlroots/* setlocal noexpandtab
autocmd BufEnter ~/git-repos/mpd-notification/* setlocal noexpandtab
autocmd BufEnter ~/git-repos/MPD/* setlocal noexpandtab
autocmd BufEnter ~/Nextcloud/Netflix.md nmap <C-s> $<C-a>
autocmd BufEnter *.h setlocal filetype=c

" Resize windows proportionally when resizing window
autocmd VimResized * wincmd =

" Run xrdb whenever Xdefaults or Xresources are updated.
autocmd BufWritePost *Xresources,*Xdefaults !xrdb %


function CppMake()
	AsyncRun -cwd=<root>/build make && find ./ -maxdepth 1 -executable -type f -exec '{}' \;
endfunction

" Syntastic configuration
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" Better number adding with <C-a> and <C-x> (previously it only works for one
" figure numbers
function! AddSubtract(char, back)
  let pattern = &nrformats =~ 'alpha' ? '[[:alpha:][:digit:]]' : '[[:digit:]]'
  call search(pattern, 'cw' . a:back)
  execute 'normal! ' . v:count1 . a:char
  silent! call repeat#set(":\<C-u>call AddSubtract('" .a:char. "', '" .a:back. "')\<CR>")
endfunction
nnoremap <silent>         <C-a> :<C-u>call AddSubtract("\<C-a>", '')<CR>
nnoremap <silent> <Leader><C-a> :<C-u>call AddSubtract("\<C-a>", 'b')<CR>
nnoremap <silent>         <C-x> :<C-u>call AddSubtract("\<C-x>", '')<CR>
nnoremap <silent> <Leader><C-x> :<C-u>call AddSubtract("\<C-x>", 'b')<CR>

" Add color column only when line is longer than 80 characters
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%81v', 100)

" For the autoswap plugin, the terminal title has to be set to the file name
set title titlestring=

" Storage for useful macros
" Paste a h2 header from markdown file for generating TOC. First mark b for
" the start of your search
" ma'b/^## f ly$mb'apzz

" Create a toc entry from line
" I* lv$hS]lyi[A(a#p^

if has('mouse')
	set mouse=a
end

" Show whitespace at the end of line in an non-obnoxious way
autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
highlight EOLWS ctermbg=red guibg=red
